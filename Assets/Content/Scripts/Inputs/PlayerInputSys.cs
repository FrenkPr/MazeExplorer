//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Content/Scripts/Inputs/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSys : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""8b445174-f6d1-4a54-ba59-537134e83e28"",
            ""actions"": [
                {
                    ""name"": ""MoveDir"",
                    ""type"": ""Value"",
                    ""id"": ""20c23aac-ef15-4602-a15c-da2ae7705a4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Dir"",
                    ""id"": ""0b437d94-fa60-4ca9-81d7-d383b1af60c0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""53e328c3-876f-4279-b6a8-eaf22ac34014"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8d2ab6ca-8891-4f29-a738-2f420e4832bb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""501c025c-f78a-486d-ab6c-9c0dd48298d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a7b8cfa-f3b4-4bbe-b199-961be1a4b678"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""OpenDoorAction"",
            ""id"": ""10d82fc3-a507-45f9-b174-5a5e94b015ac"",
            ""actions"": [
                {
                    ""name"": ""OpenDoor"",
                    ""type"": ""Button"",
                    ""id"": ""55e70d29-90d4-4329-8e0c-25fca9e6bd4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abd8b302-98d6-4439-8816-c0fedab81830"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenDoor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TogglePauseMenuAction"",
            ""id"": ""9873532f-73f2-4539-a33a-fa7bd8e5a6e5"",
            ""actions"": [
                {
                    ""name"": ""TogglePauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c3cb9e12-b01b-4bd7-8078-9f5ece367b79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c1dc44c-5f64-4cf9-9033-29a714dff299"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_MoveDir = m_Move.FindAction("MoveDir", throwIfNotFound: true);
        // OpenDoorAction
        m_OpenDoorAction = asset.FindActionMap("OpenDoorAction", throwIfNotFound: true);
        m_OpenDoorAction_OpenDoor = m_OpenDoorAction.FindAction("OpenDoor", throwIfNotFound: true);
        // TogglePauseMenuAction
        m_TogglePauseMenuAction = asset.FindActionMap("TogglePauseMenuAction", throwIfNotFound: true);
        m_TogglePauseMenuAction_TogglePauseMenu = m_TogglePauseMenuAction.FindAction("TogglePauseMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_MoveDir;
    public struct MoveActions
    {
        private @PlayerInputSys m_Wrapper;
        public MoveActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDir => m_Wrapper.m_Move_MoveDir;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @MoveDir.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnMoveDir;
                @MoveDir.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnMoveDir;
                @MoveDir.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnMoveDir;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDir.started += instance.OnMoveDir;
                @MoveDir.performed += instance.OnMoveDir;
                @MoveDir.canceled += instance.OnMoveDir;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // OpenDoorAction
    private readonly InputActionMap m_OpenDoorAction;
    private IOpenDoorActionActions m_OpenDoorActionActionsCallbackInterface;
    private readonly InputAction m_OpenDoorAction_OpenDoor;
    public struct OpenDoorActionActions
    {
        private @PlayerInputSys m_Wrapper;
        public OpenDoorActionActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenDoor => m_Wrapper.m_OpenDoorAction_OpenDoor;
        public InputActionMap Get() { return m_Wrapper.m_OpenDoorAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OpenDoorActionActions set) { return set.Get(); }
        public void SetCallbacks(IOpenDoorActionActions instance)
        {
            if (m_Wrapper.m_OpenDoorActionActionsCallbackInterface != null)
            {
                @OpenDoor.started -= m_Wrapper.m_OpenDoorActionActionsCallbackInterface.OnOpenDoor;
                @OpenDoor.performed -= m_Wrapper.m_OpenDoorActionActionsCallbackInterface.OnOpenDoor;
                @OpenDoor.canceled -= m_Wrapper.m_OpenDoorActionActionsCallbackInterface.OnOpenDoor;
            }
            m_Wrapper.m_OpenDoorActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenDoor.started += instance.OnOpenDoor;
                @OpenDoor.performed += instance.OnOpenDoor;
                @OpenDoor.canceled += instance.OnOpenDoor;
            }
        }
    }
    public OpenDoorActionActions @OpenDoorAction => new OpenDoorActionActions(this);

    // TogglePauseMenuAction
    private readonly InputActionMap m_TogglePauseMenuAction;
    private ITogglePauseMenuActionActions m_TogglePauseMenuActionActionsCallbackInterface;
    private readonly InputAction m_TogglePauseMenuAction_TogglePauseMenu;
    public struct TogglePauseMenuActionActions
    {
        private @PlayerInputSys m_Wrapper;
        public TogglePauseMenuActionActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePauseMenu => m_Wrapper.m_TogglePauseMenuAction_TogglePauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_TogglePauseMenuAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TogglePauseMenuActionActions set) { return set.Get(); }
        public void SetCallbacks(ITogglePauseMenuActionActions instance)
        {
            if (m_Wrapper.m_TogglePauseMenuActionActionsCallbackInterface != null)
            {
                @TogglePauseMenu.started -= m_Wrapper.m_TogglePauseMenuActionActionsCallbackInterface.OnTogglePauseMenu;
                @TogglePauseMenu.performed -= m_Wrapper.m_TogglePauseMenuActionActionsCallbackInterface.OnTogglePauseMenu;
                @TogglePauseMenu.canceled -= m_Wrapper.m_TogglePauseMenuActionActionsCallbackInterface.OnTogglePauseMenu;
            }
            m_Wrapper.m_TogglePauseMenuActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TogglePauseMenu.started += instance.OnTogglePauseMenu;
                @TogglePauseMenu.performed += instance.OnTogglePauseMenu;
                @TogglePauseMenu.canceled += instance.OnTogglePauseMenu;
            }
        }
    }
    public TogglePauseMenuActionActions @TogglePauseMenuAction => new TogglePauseMenuActionActions(this);
    public interface IMoveActions
    {
        void OnMoveDir(InputAction.CallbackContext context);
    }
    public interface IOpenDoorActionActions
    {
        void OnOpenDoor(InputAction.CallbackContext context);
    }
    public interface ITogglePauseMenuActionActions
    {
        void OnTogglePauseMenu(InputAction.CallbackContext context);
    }
}
